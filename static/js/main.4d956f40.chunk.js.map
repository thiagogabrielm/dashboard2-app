{"version":3,"sources":["components/PlotReactVis.js","App.js","reportWebVitals.js","index.js"],"names":["PlotReactVis","plant","sensor","aggregation","useState","data","loaded","title","series","setSeries","selection","setSelection","lastDrawLocation","setLastDrawLocation","unit","setUnit","useEffect","a","data_db","options","headers","url","console","log","axios","get","res","push","dbdata","map","row","x","Date","parse","time","getTime","y","parseFloat","value","seriesCopy","slice","apiCall","interval","setInterval","clearInterval","style","width","height","replace","xType","animation","xDomain","hasOwnProperty","selectionStart","Math","max","left","min","selectionEnd","right","yDomain","bottom","top","entry","all","fill","position","onBrushEnd","area","onDrag","color","drag","enableY","onDragEnd","App","className","Fragment","index","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sUAee,SAASA,EAAT,GAAuD,IAA/BC,EAA8B,EAA9BA,MAAOC,EAAuB,EAAvBA,OAAQC,EAAe,EAAfA,YAClD,EAA4BC,mBAAS,CACjC,CACIC,KAAM,GACNC,QAAQ,EACRC,MAAO,UAJf,mBAAOC,EAAP,KAAeC,EAAf,KAQA,EAAkCL,mBAAS,MAA3C,mBAAOM,EAAP,KAAkBC,EAAlB,KAEA,EAAgDP,mBAAS,MAAzD,mBAAOQ,EAAP,KAAyBC,EAAzB,KACA,EAAwBT,mBAAS,MAAjC,mBAAOU,EAAP,KAAaC,EAAb,KAqEA,OAnEAC,qBAAU,YAGO,uCAAG,oCAAAC,EAAA,6DACRC,EAAU,GACRC,EAAU,CACZC,QAAS,CAAE,cAAiB,kzBAE1BC,EAAM,2EAAsFnB,EAAS,UAAYD,EAAQ,gBAAkBE,EACjJmB,QAAQC,IAAI,gBANA,kBAQUC,IAAMC,IAAIJ,EAAKF,GARzB,cAQFO,EARE,iBAUFR,EAAQS,KAAKD,EAAIrB,KAAKuB,OAAOC,KAAI,SAAAC,GAAG,MAAK,CAAEC,EAAG,IAAIC,KAAKA,KAAKC,MAAMH,EAAII,OAAOC,UAAWC,EAAGC,WAAWP,EAAIQ,YAVxG,SAWJC,EAAa/B,EAAOgC,SACb,GAAGnC,KAAOa,EAAQ,GAC7BqB,EAAW,GAAGjC,QAAS,EACvBG,EAAU8B,GACVxB,EAAQW,EAAIrB,KAAKuB,OAAO,GAAGd,MAE3BQ,QAAQC,IAAI,WAjBJ,kDAmBRD,QAAQC,IAAI,WACZD,QAAQC,IAAR,MApBQ,0DAAH,qDAwBbkB,KAGD,IAGHzB,qBAAU,WACN,IAAM0B,EAAWC,aAAY,YAEZ,uCAAG,oCAAA1B,EAAA,6DACRC,EAAU,GACRC,EAAU,CACZC,QAAS,CAAE,cAAiB,kzBAE1BC,EAAM,2EAAsFnB,EAAS,UAAYD,EAAQ,gBAAkBE,EACjJmB,QAAQC,IAAI,gBANA,kBAQUC,IAAMC,IAAIJ,EAAKF,GARzB,cAQFO,EARE,iBAUFR,EAAQS,KAAKD,EAAIrB,KAAKuB,OAAOC,KAAI,SAAAC,GAAG,MAAK,CAAEC,EAAG,IAAIC,KAAKA,KAAKC,MAAMH,EAAII,OAAOC,UAAWC,EAAGC,WAAWP,EAAIQ,YAVxG,SAWJC,EAAa/B,EAAOgC,SACb,GAAGnC,KAAOa,EAAQ,GAC7BqB,EAAW,GAAGjC,QAAS,EACvBG,EAAU8B,GACVxB,EAAQW,EAAIrB,KAAKuB,OAAO,GAAGd,MAE3BQ,QAAQC,IAAI,WAjBJ,kDAmBRD,QAAQC,IAAI,WACZD,QAAQC,IAAR,MApBQ,0DAAH,qDAwBbkB,KAED,KACH,OAAO,kBAAMG,cAAcF,MAC5B,IAIC,mCACI,qBAAKG,MAAO,CACRC,MAAM,SACNC,OAAO,SAFX,SAIKvC,EAAO,GAAGF,OACP,qCACI,gCACKL,EAAM+C,QAAQ,KAAM,KADzB,MACkC9C,EAAO8C,QAAQ,KAAM,QAEvD,eAAC,IAAD,CACIC,MAAM,OACNC,WAAS,EACTC,QACiB,MAAbzC,GAAqBA,EAAU0C,eAAe,mBAAiD,MAA5B1C,EAAU2C,eAA0BzC,EAAmB,CACtH0C,KAAKC,IAAI7C,EAAU2C,eAAgBzC,EAAiB4C,MACpDF,KAAKG,IAAI/C,EAAUgD,aAAc9C,EAAiB+C,QAClD,CACAjD,EAAU2C,eACV3C,EAAUgD,cACR9C,EAAmB,CACrBA,EAAiB4C,KACjB5C,EAAiB+C,OACjB,KAERC,QACIhD,GAAoB,CAChBA,EAAiBiD,OACjBjD,EAAiBkD,KAIzBhB,MAAO,IACPC,OAAQ,IAvBZ,UAyBI,cAAC,IAAD,IAECvC,EAAOqB,KAAI,SAAAkC,GAAK,OACb,cAAC,IAAD,CAA8B1D,KAAM0D,EAAM1D,MAAzB0D,EAAMxD,UAG3B,cAAC,IAAD,CAASsC,MAAO,CACZmB,IAAK,CAAEC,KAAM,YAEjB,cAAC,IAAD,CAAOC,SAAS,MAAM3D,MAAOO,IAC7B,cAAC,IAAD,CAAOoD,SAAS,MAAM3D,MAAM,SAE5B,cAAC,IAAD,CACI4D,WAAY,SAAAC,GAAI,OAAIvD,EAAoBuD,IACxCC,OAAQ,SAAAD,GACJvD,EAAoB,CAChBgD,OAAQjD,EAAiBiD,QAAUO,EAAKN,IAAMM,EAAKP,QACnDL,KAAM5C,EAAiB4C,MAAQY,EAAKT,MAAQS,EAAKZ,MACjDG,MAAO/C,EAAiB+C,OAASS,EAAKT,MAAQS,EAAKZ,MACnDM,IAAKlD,EAAiBkD,KAAOM,EAAKN,IAAMM,EAAKP,gBAO7D,eAAC,IAAD,CACIZ,MAAM,OACNC,WAAS,EAETJ,MAAO,IACPC,OAAQ,IALZ,UAOI,cAAC,IAAD,IAEA,cAAC,IAAD,IACA,cAAC,IAAD,IAECvC,EAAOqB,KAAI,SAAAkC,GAAK,OACb,cAAC,IAAD,CAA8B1D,KAAM0D,EAAM1D,MAAzB0D,EAAMxD,UAG3B,cAAC,IAAD,CACI+D,MAAM,UACNC,MAAI,EACJC,SAAS,EACTL,WAAY,SAAAC,GACRzD,EAAa,CACT0C,eAAgBe,GAAQA,EAAKZ,KAC7BE,aAAcU,GAAQA,EAAKT,SAGnCU,OAAQ,SAAAD,GACJzD,EAAa,CACT0C,eAAgBe,GAAQA,EAAKZ,KAC7BE,aAAcU,GAAQA,EAAKT,SAGnCc,UAAW,SAAAL,GACPzD,EAAa,CACT0C,eAAgBe,GAAQA,EAAKZ,KAC7BE,aAAcU,GAAQA,EAAKT,iBAS/C,iDCzJLe,MA7Cf,WACE,MAAgCtE,oBAAS,GAAzC,mBAEMD,GAFN,UAEoB,aAepB,OAEE,qBAAKwE,UAAU,MAAf,SAIE,eAAC,IAAMC,SAAP,WAXuB,CAAC,MAAO,iBAAkB,eAAgB,YAAa,4BAA6B,wBAAyB,uBAAwB,qBAYtI/C,KAAI,SAAC3B,EAAQ2E,GAAT,OACtB,cAAC7E,EAAD,CAA0BC,MApBlB,yBAoBkCC,OAAQA,EAAQC,YAAaA,GAApD0E,MAlBA,CAAC,MAAO,iBAAkB,eAAgB,YAAa,4BAA6B,wBAAyB,uBAAwB,qBAqBtIhD,KAAI,SAAC3B,EAAQ2E,GAAT,OACtB,cAAC7E,EAAD,CAA0BC,MAzBlB,0BAyBkCC,OAAQA,EAAQC,YAAaA,GAApD0E,YCtBdC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,YCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.4d956f40.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nimport {\r\n    XAxis,\r\n    YAxis,\r\n    Borders,\r\n    HorizontalGridLines,\r\n    XYPlot,\r\n    LineSeries,\r\n    Highlight\r\n} from 'react-vis';\r\n\r\nimport axios from 'axios'\r\n\r\n\r\nexport default function PlotReactVis({ plant, sensor, aggregation }) {\r\n    const [series, setSeries] = useState([\r\n        {\r\n            data: [],\r\n            loaded: false,\r\n            title: 'Plot'\r\n        }\r\n    ])\r\n\r\n    const [selection, setSelection] = useState(null)\r\n    const limit = 2000;\r\n    const [lastDrawLocation, setLastDrawLocation] = useState(null)\r\n    const [unit, setUnit] = useState(null)\r\n\r\n    useEffect(() => {\r\n        \r\n\r\n        const apiCall = async () => {\r\n            var data_db = [];\r\n            const options = {\r\n                headers: { 'authorization': 'Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6Ims3NHM4RXR3SEp6RlV4Y19sSDNsUiJ9.eyJpc3MiOiJodHRwczovL2Rldi1kaXBhaS5ldS5hdXRoMC5jb20vIiwic3ViIjoiZmxJZFhjdzVZSDdmR3E5NzRrU3ZvcHg1Q3RHMWNmRG9AY2xpZW50cyIsImF1ZCI6Imh0dHBzOi8vYXBpLm5vZ3ZhLm5vIiwiaWF0IjoxNjIzNjc2NTgxLCJleHAiOjE2MjM3NjI5ODEsImF6cCI6ImZsSWRYY3c1WUg3ZkdxOTc0a1N2b3B4NUN0RzFjZkRvIiwic2NvcGUiOiJyZWFkOnNlbnNvcmRhdGEgcmVhZDptbGRhdGEgd3JpdGU6c2Vuc29yZGF0YSB3cml0ZTptbGRhdGEiLCJndHkiOiJjbGllbnQtY3JlZGVudGlhbHMifQ.kFh2HTDSfhcKL4QDkBg3G4BC4GUZXMLSpbOfHkXYYKVj3v8nim6CxbZINYLynE9kLSfF22eoKTwK8wF0u8UnIj_rF3r4rMJmp0FNNP9-ajmAGMTJZSYD4Zi3y4uImI6JpGzAnISdvmytjdirya1CllrWTM7kmLqoH4NCRUB4R4pDksuDPe_81Ivfy6xq9tbbh4PvFKstc7Jhgu9BpW6z6OVi8LTvY-CEQICkXwGpVXYl7cSo1zmREGSd6y_WnmFSxYFZ1DOAK9Eac0JcY447IJY1ytuzxXeVdGlsBv-F4e1in9zI11Qh7DO7clq1VPpW-MymQfuIVT4DVSVSherMhQ' }\r\n            };\r\n            const url = 'https://nogvahubrestapi.azurewebsites.net/api/sensors?limit=' + limit + '&sensor=' + sensor + '&plant=' + plant + '&aggregation=' + aggregation;\r\n            console.log('try fetch...')\r\n            try {\r\n                const res = await axios.get(url, options);\r\n                // console.log(res.data.dbdata[0])\r\n                await data_db.push(res.data.dbdata.map(row => ({ x: new Date(Date.parse(row.time)).getTime(), y: parseFloat(row.value) })))\r\n                var seriesCopy = series.slice();\r\n                seriesCopy[0].data = data_db[0]\r\n                seriesCopy[0].loaded = true\r\n                setSeries(seriesCopy)\r\n                setUnit(res.data.dbdata[0].unit)\r\n                // console.log(data_db)\r\n                console.log('apicall')\r\n            } catch (err) {\r\n                console.log(\"error: \")\r\n                console.log(err)\r\n            }\r\n\r\n        }\r\n        apiCall();\r\n\r\n      \r\n    }, []);\r\n\r\n\r\n    useEffect(() => {\r\n        const interval = setInterval(() => {\r\n\r\n            const apiCall = async () => {\r\n                var data_db = [];\r\n                const options = {\r\n                    headers: { 'authorization': 'Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6Ims3NHM4RXR3SEp6RlV4Y19sSDNsUiJ9.eyJpc3MiOiJodHRwczovL2Rldi1kaXBhaS5ldS5hdXRoMC5jb20vIiwic3ViIjoiZmxJZFhjdzVZSDdmR3E5NzRrU3ZvcHg1Q3RHMWNmRG9AY2xpZW50cyIsImF1ZCI6Imh0dHBzOi8vYXBpLm5vZ3ZhLm5vIiwiaWF0IjoxNjIzNjc2NTgxLCJleHAiOjE2MjM3NjI5ODEsImF6cCI6ImZsSWRYY3c1WUg3ZkdxOTc0a1N2b3B4NUN0RzFjZkRvIiwic2NvcGUiOiJyZWFkOnNlbnNvcmRhdGEgcmVhZDptbGRhdGEgd3JpdGU6c2Vuc29yZGF0YSB3cml0ZTptbGRhdGEiLCJndHkiOiJjbGllbnQtY3JlZGVudGlhbHMifQ.kFh2HTDSfhcKL4QDkBg3G4BC4GUZXMLSpbOfHkXYYKVj3v8nim6CxbZINYLynE9kLSfF22eoKTwK8wF0u8UnIj_rF3r4rMJmp0FNNP9-ajmAGMTJZSYD4Zi3y4uImI6JpGzAnISdvmytjdirya1CllrWTM7kmLqoH4NCRUB4R4pDksuDPe_81Ivfy6xq9tbbh4PvFKstc7Jhgu9BpW6z6OVi8LTvY-CEQICkXwGpVXYl7cSo1zmREGSd6y_WnmFSxYFZ1DOAK9Eac0JcY447IJY1ytuzxXeVdGlsBv-F4e1in9zI11Qh7DO7clq1VPpW-MymQfuIVT4DVSVSherMhQ' }\r\n                };\r\n                const url = 'https://nogvahubrestapi.azurewebsites.net/api/sensors?limit=' + limit + '&sensor=' + sensor + '&plant=' + plant + '&aggregation=' + aggregation;\r\n                console.log('try fetch...')\r\n                try {\r\n                    const res = await axios.get(url, options);\r\n                    // console.log(res.data.dbdata[0])\r\n                    await data_db.push(res.data.dbdata.map(row => ({ x: new Date(Date.parse(row.time)).getTime(), y: parseFloat(row.value) })))\r\n                    var seriesCopy = series.slice();\r\n                    seriesCopy[0].data = data_db[0]\r\n                    seriesCopy[0].loaded = true\r\n                    setSeries(seriesCopy)\r\n                    setUnit(res.data.dbdata[0].unit)\r\n                    // console.log(data_db)\r\n                    console.log('apicall')\r\n                } catch (err) {\r\n                    console.log(\"error: \")\r\n                    console.log(err)\r\n                }\r\n\r\n            }\r\n            apiCall();\r\n\r\n        }, 60000);\r\n        return () => clearInterval(interval);\r\n    }, []);\r\n\r\n\r\n    return (\r\n        <>\r\n            <div style={{\r\n                width: `1000px`,\r\n                height: `420px`,\r\n            }}>\r\n                {series[0].loaded ? (\r\n                    <>\r\n                        <div>\r\n                            {plant.replace(/_/g, \" \")} / {sensor.replace(/_/g, \" \")}\r\n                        </div>\r\n                        <XYPlot\r\n                            xType=\"time\"\r\n                            animation\r\n                            xDomain={\r\n                                selection != null && selection.hasOwnProperty('selectionStart') && selection.selectionStart != null ? (lastDrawLocation ? [\r\n                                    Math.max(selection.selectionStart, lastDrawLocation.left),\r\n                                    Math.min(selection.selectionEnd, lastDrawLocation.right)\r\n                                ] : [\r\n                                    selection.selectionStart,\r\n                                    selection.selectionEnd\r\n                                ]) : (lastDrawLocation ? [\r\n                                    lastDrawLocation.left,\r\n                                    lastDrawLocation.right\r\n                                ] : null)\r\n                            }\r\n                            yDomain={\r\n                                lastDrawLocation && [\r\n                                    lastDrawLocation.bottom,\r\n                                    lastDrawLocation.top\r\n                                ]\r\n                            }\r\n\r\n                            width={1000}\r\n                            height={300}\r\n                        >\r\n                            <HorizontalGridLines />\r\n\r\n                            {series.map(entry => (\r\n                                <LineSeries key={entry.title} data={entry.data} />\r\n                            ))}\r\n\r\n                            <Borders style={{\r\n                                all: { fill: 'white' },\r\n                            }} />\r\n                            <YAxis position='end' title={unit} />\r\n                            <XAxis position='end' title='time' />\r\n\r\n                            <Highlight\r\n                                onBrushEnd={area => setLastDrawLocation(area)}\r\n                                onDrag={area => {\r\n                                    setLastDrawLocation({\r\n                                        bottom: lastDrawLocation.bottom + (area.top - area.bottom),\r\n                                        left: lastDrawLocation.left - (area.right - area.left),\r\n                                        right: lastDrawLocation.right - (area.right - area.left),\r\n                                        top: lastDrawLocation.top + (area.top - area.bottom)\r\n                                    }\r\n                                    );\r\n                                }}\r\n                            />\r\n                        </XYPlot>\r\n\r\n                        <XYPlot\r\n                            xType=\"time\"\r\n                            animation\r\n\r\n                            width={1000}\r\n                            height={100}\r\n                        >\r\n                            <HorizontalGridLines />\r\n\r\n                            <YAxis />\r\n                            <XAxis />\r\n\r\n                            {series.map(entry => (\r\n                                <LineSeries key={entry.title} data={entry.data} />\r\n                            ))}\r\n\r\n                            <Highlight\r\n                                color=\"#829AE3\"\r\n                                drag\r\n                                enableY={false}\r\n                                onBrushEnd={area => {\r\n                                    setSelection({\r\n                                        selectionStart: area && area.left,\r\n                                        selectionEnd: area && area.right\r\n                                    });\r\n                                }}\r\n                                onDrag={area => {\r\n                                    setSelection({\r\n                                        selectionStart: area && area.left,\r\n                                        selectionEnd: area && area.right\r\n                                    });\r\n                                }}\r\n                                onDragEnd={area => {\r\n                                    setSelection({\r\n                                        selectionStart: area && area.left,\r\n                                        selectionEnd: area && area.right\r\n                                    });\r\n                                }}\r\n                            />\r\n\r\n                        </XYPlot>\r\n\r\n                    </>\r\n                ) : (\r\n                    <div>\r\n                        Loading...\r\n                    </div>\r\n                )}\r\n            </div>\r\n\r\n        </>\r\n    );\r\n\r\n}\r\n","import './App.css';\nimport PlotReactVis from './components/PlotReactVis'\nimport React, { useState } from 'react';\n\nfunction App() {\n  const [ferryOne, setFerryOne] = useState(true)\n\n  const aggregation = \"snap_mean\"\n  const plant21 = \"Geirangerfjord2/13185-1\"\n  const plant22 = \"Geirangerfjord2/13185-2\"\n  const plant11 = \"Geirangerfjord1/9648-1\"\n  const plant12 = \"Geirangerfjord1/9648-2\"\n  const sensors_geiranger2 = [\"rpm\", \"boost_pressure\", \"engine_power\", \"fuel_rate\", \"cooling_water_temperature\", \"exhaust_temperature_1\", \"lube_oil_temperature\", \"lube_oil_pressure\"]\n\n  // const sensors_geiranger2 = [\"rpm\", \"fuel_rate\", \"cooling_water_temperature\", \"exhaust_temperature_1\", \"throttle\", \"service_battery\", \"start_battery\", \"manifold_air_temperature\", \"exhaust_temperature_2\",\n  // \"lube_oil_temperature\", \"lube_oil_pressure\", \"boost_pressure\", \"gear_oil_temp\", \"gear_oil_pressure\", \"engine_power\"]\n\n  const sensors_geiranger1 = [\"rpm\", \"boost_pressure\", \"engine_power\", \"fuel_rate\", \"cooling_water_temperature\", \"exhaust_temperature_1\", \"lube_oil_temperature\", \"lube_oil_pressure\"]\n\n  // const sensors_geiranger1 = [\"rpm\", \"fuel_rate\", \"cooling_water_temperature\", \"exhaust_temperature_1\", \"service_battery\", \"start_battery\", \"exhaust_temperature_2\",\n  // \"lube_oil_temperature\", \"lube_oil_pressure\", \"boost_pressure\", \"gear_oil_temp\", \"gear_oil_pressure\", \"engine_power\"]\n\n  return (\n\n    <div className=\"App\">\n      {/* <button onClick={()=>setFerryOne(!ferryOne)}>Change Ferry</button>\n      {console.log(ferryOne)} */}\n      {/* {ferryOne ? ( */}\n      <React.Fragment>\n        {sensors_geiranger1.map((sensor, index) => (\n          <PlotReactVis key={index} plant={plant11} sensor={sensor} aggregation={aggregation}></PlotReactVis>\n        ))}\n\n        {sensors_geiranger2.map((sensor, index) => (\n          <PlotReactVis key={index} plant={plant22} sensor={sensor} aggregation={aggregation}></PlotReactVis>\n        ))}\n      </React.Fragment>\n      {/* ) : (\n        { console.log(\"...\") }\n      )} */}\n      {/* <PlotReactVis plant={plant} sensor={\"gear_oil_temp\"} aggregation={aggregation}></PlotReactVis>\n\n      <PlotReactVis plant={plant} sensor={\"service_battery\"} aggregation={aggregation}></PlotReactVis> */}\n\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport './plots.scss';\nimport './legends.scss';\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}