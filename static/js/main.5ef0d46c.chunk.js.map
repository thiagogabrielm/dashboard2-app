{"version":3,"sources":["components/PlotReactVis.js","App.js","reportWebVitals.js","index.js"],"names":["PlotReactVis","plant","sensor","aggregation","useState","data","loaded","title","series","setSeries","selection","setSelection","lastDrawLocation","setLastDrawLocation","useEffect","interval","setInterval","a","data_db","options","headers","url","axios","get","res","push","dbdata","map","row","x","Date","parse","time","getTime","y","parseFloat","value","seriesCopy","slice","console","log","apiCall","clearInterval","style","width","height","replace","xType","animation","xDomain","hasOwnProperty","selectionStart","Math","max","left","min","selectionEnd","right","yDomain","bottom","top","entry","all","fill","position","onBrushEnd","area","onDrag","color","drag","enableY","onDragEnd","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5ef0d46c.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nimport {\r\n    XAxis,\r\n    YAxis,\r\n    Borders,\r\n    HorizontalGridLines,\r\n    XYPlot,\r\n    LineSeries,\r\n    Highlight\r\n} from 'react-vis';\r\n\r\nimport axios from 'axios'\r\n\r\n\r\nexport default function PlotReactVis({ plant, sensor, aggregation }) {\r\n    const [series, setSeries] = useState([\r\n        {\r\n            data: [],\r\n            loaded: false,\r\n            title: 'Plot'\r\n        }\r\n    ])\r\n\r\n    const [selection, setSelection] = useState(null)\r\n    const limit = 1440;\r\n    const [lastDrawLocation, setLastDrawLocation] = useState(null)\r\n\r\n\r\n    useEffect(() => {\r\n        const interval = setInterval(() => {\r\n\r\n            const apiCall = async () => {\r\n                var data_db = [];\r\n                const options = {\r\n                    headers: { 'authorization': 'Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6Ims3NHM4RXR3SEp6RlV4Y19sSDNsUiJ9.eyJpc3MiOiJodHRwczovL2Rldi1kaXBhaS5ldS5hdXRoMC5jb20vIiwic3ViIjoiUjVaNVowaXdqdm1qeTF5MGxMRXlmRmVPR1JjV2dXeXBAY2xpZW50cyIsImF1ZCI6Imh0dHBzOi8vYXBpLnRhZmpvcmQubm8iLCJpYXQiOjE2MjM2MDA5MDcsImV4cCI6MTYyMzY4NzMwNywiYXpwIjoiUjVaNVowaXdqdm1qeTF5MGxMRXlmRmVPR1JjV2dXeXAiLCJzY29wZSI6InJlYWQ6c2Vuc29yZGF0YSByZWFkOm1sZGF0YSB3cml0ZTpzZW5zb3JkYXRhIHdyaXRlOm1sZGF0YSIsImd0eSI6ImNsaWVudC1jcmVkZW50aWFscyJ9.IoBgP4TRYAfpQ_h8WqXDxyMZcCL51zhTUZHvBetY1W8pwhGgtok-SMDLUtQxBPRS_Z0gxTeQ-11pNCS6IMOrKaSvz_qkzKXq19PHu6TG9oQ95khIFSQLjUVaIz_6IHG7sTjCrIkUlRjv98XFVRT67HAnnHPV6lFKSOL-t4tXAMYT4J0KQXd0IKl3G-bbsOTp5GW8eFKTsiXCpfHvOlryoGU9wPAJZ7R3RI2fVlbbRrdItjXlHCwiy8y7m6Vh_6Clf2Z_6g4iRm7bHVgK2Leocoti4qd_uqf9MW8AfEWtX_V_8AnO893fm8TWl_3jgJzYTH_emUP34aLyKIth4ZtCBA' }\r\n                };\r\n                const url = 'https://tafjordhubrestapi.azurewebsites.net/api/sensors?limit=' + limit + '&sensor=' + sensor + '&plant=' + plant + '&aggregation=' + aggregation;\r\n                const res = await axios.get(url, options);\r\n                // console.log(res.data.dbdata[0])\r\n                // var unit = unitRef.current\r\n                // unit = res.data.dbdata[0].unit;\r\n                await data_db.push(res.data.dbdata.map(row => ({ x: new Date(Date.parse(row.time)).getTime(), y: 20 * parseFloat(row.value) })))\r\n                var seriesCopy = series.slice();\r\n                seriesCopy[0].data = data_db[0]\r\n                seriesCopy[0].loaded = true\r\n                setSeries(seriesCopy)\r\n                // console.log(data_db)\r\n                console.log('apicall')\r\n\r\n\r\n            }\r\n            apiCall();\r\n\r\n        }, 10000);\r\n        return () => clearInterval(interval);\r\n    }, []);\r\n\r\n\r\n    return (\r\n        <>\r\n            <div style={{\r\n                width: `1000px`,\r\n                height: `420px`,\r\n            }}>\r\n                {series[0].loaded ? (\r\n                    <>\r\n                        <div>\r\n                            {plant.replace(/_/g, \" \")} / {sensor.replace(/_/g, \" \")}\r\n                        </div>\r\n                        <XYPlot\r\n                            xType=\"time\"\r\n                            animation\r\n                            xDomain={\r\n                                selection != null && selection.hasOwnProperty('selectionStart') && selection.selectionStart != null ? (lastDrawLocation ? [\r\n                                    Math.max(selection.selectionStart, lastDrawLocation.left),\r\n                                    Math.min(selection.selectionEnd, lastDrawLocation.right)\r\n                                ] : [\r\n                                    selection.selectionStart,\r\n                                    selection.selectionEnd\r\n                                ]) : (lastDrawLocation ? [\r\n                                    lastDrawLocation.left,\r\n                                    lastDrawLocation.right\r\n                                ] : null)\r\n                            }\r\n                            yDomain={\r\n                                lastDrawLocation && [\r\n                                    lastDrawLocation.bottom,\r\n                                    lastDrawLocation.top\r\n                                ]\r\n                            }\r\n\r\n                            width={1000}\r\n                            height={300}\r\n                        >\r\n                            <HorizontalGridLines />\r\n\r\n                            {series.map(entry => (\r\n                                <LineSeries key={entry.title} data={entry.data} />\r\n                            ))}\r\n\r\n                            <Borders style={{\r\n                                all: { fill: 'white' },\r\n                            }} />\r\n                            <YAxis position='end' title='g' />\r\n                            <XAxis position='end' title='time' />\r\n\r\n                            <Highlight\r\n                                onBrushEnd={area => setLastDrawLocation(area)}\r\n                                onDrag={area => {\r\n                                    setLastDrawLocation({\r\n                                        bottom: lastDrawLocation.bottom + (area.top - area.bottom),\r\n                                        left: lastDrawLocation.left - (area.right - area.left),\r\n                                        right: lastDrawLocation.right - (area.right - area.left),\r\n                                        top: lastDrawLocation.top + (area.top - area.bottom)\r\n                                    }\r\n                                    );\r\n                                }}\r\n                            />\r\n                        </XYPlot>\r\n\r\n                        <XYPlot\r\n                            xType=\"time\"\r\n                            animation\r\n\r\n                            width={1000}\r\n                            height={100}\r\n                        >\r\n                            <HorizontalGridLines />\r\n\r\n                            <YAxis />\r\n                            <XAxis />\r\n\r\n                            {series.map(entry => (\r\n                                <LineSeries key={entry.title} data={entry.data} />\r\n                            ))}\r\n\r\n                            <Highlight\r\n                                color=\"#829AE3\"\r\n                                drag\r\n                                enableY={false}\r\n                                onBrushEnd={area => {\r\n                                    setSelection({\r\n                                        selectionStart: area && area.left,\r\n                                        selectionEnd: area && area.right\r\n                                    });\r\n                                }}\r\n                                onDrag={area => {\r\n                                    setSelection({\r\n                                        selectionStart: area && area.left,\r\n                                        selectionEnd: area && area.right\r\n                                    });\r\n                                }}\r\n                                onDragEnd={area => {\r\n                                    setSelection({\r\n                                        selectionStart: area && area.left,\r\n                                        selectionEnd: area && area.right\r\n                                    });\r\n                                }}\r\n                            />\r\n\r\n                        </XYPlot>\r\n                        \r\n                    </>\r\n                ) : (\r\n                    <div>\r\n                        Loading...\r\n                    </div>\r\n                )}\r\n            </div>\r\n\r\n        </>\r\n    );\r\n\r\n}\r\n","import './App.css';\nimport PlotReactVis from './components/PlotReactVis'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PlotReactVis plant={'ice_water_pump_2'} sensor={'vibration_sensor_1'} aggregation={'mae'}></PlotReactVis>\n\n      <PlotReactVis plant={'ice_water_pump_2'} sensor={'vibration_sensor_2'} aggregation={'mae'}></PlotReactVis>\n\n      <PlotReactVis plant={'sea_water_pump_2'} sensor={'vibration_sensor_1'} aggregation={'mae'}></PlotReactVis>\n\n      <PlotReactVis plant={'sea_water_pump_2'} sensor={'vibration_sensor_2'} aggregation={'mae'}></PlotReactVis>\n      \n           \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport './plots.scss';\nimport './legends.scss';\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}